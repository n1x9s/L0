<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/internal/db/database.go">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/internal/db/database.go" />
              <option name="originalContent" value="package db&#10;&#10;import (&#10;&#9;&quot;fmt&quot;&#10;&#9;&quot;log&quot;&#10;&#9;&quot;os&quot;&#10;&#10;&#9;&quot;github.com/joho/godotenv&quot;&#10;&#9;&quot;gorm.io/driver/postgres&quot;&#10;&#9;&quot;gorm.io/gorm&quot;&#10;)&#10;&#10;func main()  {&#10;&#9;err := godotenv.Load()&#10;&#9;if err != nil {&#10;&#9;&#9;return&#10;&#9;}&#10;&#10;&#9;host := os.Getenv(&quot;DB_HOST&quot;)&#10;&#9;user := os.Getenv(&quot;DB_USER&quot;)&#10;&#9;dbname := os.Getenv(&quot;DB_NAME&quot;)&#10;&#9;password := os.Getenv(&quot;DB_PASSWORD&quot;)&#10;&#9;sslmode := os.Getenv(&quot;DB_SSLMODE&quot;)&#10;&#10;&#9;dsn := fmt.Sprintf(&quot;host=%s user=%s dbname=%s password=%s sslmode=%s&quot;, host, user, dbname, password, sslmode)&#10;&#9;db, err := gorm.Open(postgres.Open(dsn), &amp;gorm.Config{})&#10;&#9;if err != nil {&#10;&#9;&#9;log.Fatalf(&quot;ошибка подключения к бд %v&quot;, err)&#10;&#9;}&#10;&#10;&#9;//if err := db.Migrator().DropTable(&amp;Item{}); err != nil {&#10;&#9;//&#9;log.Fatalf(&quot;Ошибка дропа: %v&quot;, err)&#10;&#9;//}&#10;&#9;//&#10;&#9;//if err := db.Migrator().DropTable(&amp;Order{}); err != nil {&#10;&#9;//&#9;log.Fatalf(&quot;Ошибка дропа: %v&quot;, err)&#10;&#9;//}&#10;&#9;//&#10;&#9;//if err := db.AutoMigrate(&amp;Order{}, &amp;Item{}); err != nil {&#10;&#9;//&#9;log.Fatalf(&quot;Ошибка миграции: %v&quot;, err)&#10;&#9;//}&#10;}&#10;&#10;" />
              <option name="updatedContent" value="package db&#10;&#10;import (&#10;&#9;&quot;fmt&quot;&#10;&#9;&quot;log&quot;&#10;&#9;&quot;os&quot;&#10;&#10;&#9;&quot;github.com/joho/godotenv&quot;&#10;&#9;&quot;gorm.io/driver/postgres&quot;&#10;&#9;&quot;gorm.io/gorm&quot;&#10;)&#10;&#10;var DB *gorm.DB&#10;&#10;func InitDB() error {&#10;&#9;err := godotenv.Load()&#10;&#9;if err != nil {&#10;&#9;&#9;return err&#10;&#9;}&#10;&#10;&#9;host := os.Getenv(&quot;DB_HOST&quot;)&#10;&#9;user := os.Getenv(&quot;DB_USER&quot;)&#10;&#9;dbname := os.Getenv(&quot;DB_NAME&quot;)&#10;&#9;password := os.Getenv(&quot;DB_PASSWORD&quot;)&#10;&#9;sslmode := os.Getenv(&quot;DB_SSLMODE&quot;)&#10;&#10;&#9;dsn := fmt.Sprintf(&quot;host=%s user=%s dbname=%s password=%s sslmode=%s&quot;, host, user, dbname, password, sslmode)&#10;&#9;var errOpen error&#10;&#9;DB, errOpen = gorm.Open(postgres.Open(dsn), &amp;gorm.Config{})&#10;&#9;if errOpen != nil {&#10;&#9;&#9;log.Fatalf(&quot;ошибка подключения к бд %v&quot;, errOpen)&#10;&#9;&#9;return errOpen&#10;&#9;}&#10;&#10;&#9;//if err := DB.Migrator().DropTable(&amp;Item{}); err != nil {&#10;&#9;//&#9;log.Fatalf(&quot;Ошибка дропа: %v&quot;, err)&#10;&#9;//}&#10;&#9;//&#10;&#9;//if err := DB.Migrator().DropTable(&amp;Order{}); err != nil {&#10;&#9;//&#9;log.Fatalf(&quot;Ошибка дропа: %v&quot;, err)&#10;&#9;//}&#10;&#9;//&#10;&#9;//if err := DB.AutoMigrate(&amp;Order{}, &amp;Item{}); err != nil {&#10;&#9;//&#9;log.Fatalf(&quot;Ошибка миграции: %v&quot;, err)&#10;&#9;//}&#10;&#10;&#9;return nil&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/internal/routers/orders.go">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/internal/routers/orders.go" />
              <option name="originalContent" value="package routers&#10;&#10;import &quot;github.com/n1x9s/learnBasic/internal/handlers&quot;&#10;&#10;func RegisterOrderRoutes() {&#10;&#9;orders := r.Group(&quot;/orders&quot;)&#10;&#9;orders.GET(&quot;/&quot;, handlers.GetOrders)&#10;}&#10;" />
              <option name="updatedContent" value="package routers&#10;&#10;import (&#10;&#9;&quot;github.com/gin-gonic/gin&quot;&#10;&#9;&quot;github.com/n1x9s/learnBasic/internal/handlers&quot;&#10;)&#10;&#10;func RegisterOrderRoutes(r *gin.Engine) {&#10;&#9;orders := r.Group(&quot;/orders&quot;)&#10;&#9;orders.GET(&quot;/&quot;, handlers.GetOrders)&#10;&#9;// Здесь можно добавить другие маршруты, например:&#10;&#9;// orders.POST(&quot;/&quot;, handlers.CreateOrder)&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>